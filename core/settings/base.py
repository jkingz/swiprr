"""
Django settings for homeswipr project.

Generated by 'django-admin startproject' using Django 3.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
from datetime import timedelta

from decouple import Csv, config

# Build paths inside the project like this: os.path.join(PROJECT_PATH, ...)
# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
PROJECT_PATH = os.path.abspath(os.path.dirname(__name__))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY")

# Configures ssl header to properly paginate on the django rest framework
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", default=False, cast=bool)

ALLOWED_HOSTS = config("ALLOWED_HOSTS", default=[], cast=Csv())

# Application definition

DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "django.contrib.gis",
]

THIRD_PARTY_APPS = [
    "rest_framework",
    "rest_framework.authtoken",
    "taggit",
    "dj_rest_auth",
    "allauth",
    "allauth.account",
    "dj_rest_auth.registration",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.apple",
    "allauth.socialaccount.providers.facebook",
    "allauth.socialaccount.providers.google",
    "allauth.socialaccount.providers.linkedin",
    "allauth.socialaccount.providers.linkedin_oauth2",
    "simple_history",
    "django.contrib.postgres",
    "django_extensions",
    "phonenumber_field"
]

LOCAL_APPS = [
    "crea_parser.apps.CreaParserConfig",
    "homeswipr",
    "homeswipr.apps.CoreConfig",
    "users.apps.UsersConfig",
    "appointments.apps.AppointmentsConfig",
    "question.apps.QuestionConfig",
    "deal.apps.DealConfig",
    "offers.apps.OffersConfig",
    "contacts.apps.ContactsConfig",
    "leads.apps.LeadsConfig",
    "components.apps.ComponentsConfig",
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "simple_history.middleware.HistoryRequestMiddleware",
]

# FE constant links
FRONTEND_DOMAIN = config("FRONTEND_DOMAIN", default="")
HISTORY_MODE = config("HISTORY_MODE", default=True, cast=bool)
CORS_ORIGIN_WHITELIST = config(
    "CORS_ORIGIN_WHITELIST", default=[FRONTEND_DOMAIN], cast=Csv()
)


ROOT_URLCONF = "core.urls"


TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        # Defined since this is where all auth gets most of the templates
        "DIRS": [os.path.join(PROJECT_PATH, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": "django.contrib.gis.db.backends.postgis",
        "NAME": config("DATABASE_NAME", default=""),
        "USER": config("DATABASE_USER", default=""),
        "PASSWORD": config("DATABASE_PASSWORD", default=""),
        "HOST": config("DATABASE_HOST", default=""),
        "PORT": config("DATABASE_PORT", default=""),
        "CONN_MAX_AGE": int(config("DATABASE_CONN_MAX_AGE", 600)),
        # Create a template on postgres that automatically extends
        # postgis. So no superuser is needed
        "TEST": {
            "TEMPLATE": "template_postgis",
        },
    }
}

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

BROKER_URL = config("BROKER_URL", default="")
BROKER_TRANSPORT = config("BROKER_TRANSPORT", default="")


# CREA VARIABLES
# This should be traced and refactored on ddf manager (the parser)
# so we have consisten caps constants
CREA_LOGIN_URL = config("CREA_LOGIN_URL", "")
CREA_USERNAME = config("CREA_USERNAME", "")
CREA_PASSWORD = config("CREA_PASSWORD", "")
FETCH_CREA_SAMPLE = config("FETCH_CREA_SAMPLE", default=False, cast=bool)

# Email settings
EMAIL_USE_TLS = config("EMAIL_USE_TLS", default=True, cast=bool)
EMAIL_HOST = config("EMAIL_HOST", "")
EMAIL_HOST_USER = config("EMAIL_HOST_USER", "")
EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD", "")
EMAIL = config("EMAIL", "")
EMAIL_PORT = 587


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "dj_rest_auth.jwt_auth.JWTCookieAuthentication",
    ),
    "DEFAULT_PAGINATION_CLASS": "core.pagination.StandardResultsSetPagination",
    "PAGE_SIZE": 100,
}


REST_AUTH_SERIALIZERS = {
    "USER_DETAILS_SERIALIZER": "users.serializers.UserProfileSerializer",
    "PASSWORD_RESET_SERIALIZER": "users.serializers.HomewSwiprPasswordResetSerializer",
    "LOGIN_SERIALIZER": "users.serializers.CustomLoginSerializer",
}

REST_AUTH_REGISTER_SERIALIZERS = {
    "REGISTER_SERIALIZER": "users.serializers.RegisterSerializer"
}


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

REST_USE_JWT = True

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
}

JWT_AUTH_COOKIE = "core-auth"

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

USE_THOUSAND_SEPARATOR = True

LOG_FILENAME = config("LOG_FILENAME", default="logs/homeswipr.log")

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

# all auth settings
ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_ADAPTER = "users.adapter.HomeSwiperAccountAdapter"
OLD_PASSWORD_FIELD_ENABLED = True

# Subject-line prefix to use for email messages sent. By default, the name of the current Site (django.contrib.sites) is used.
# So override it with an empty string.
ACCOUNT_EMAIL_SUBJECT_PREFIX = ''

# Mimics ttap, so the static directory for the project will be uniform
STATIC_ROOT = os.path.join(PROJECT_PATH, "staticfiles")
STATIC_URL = "/static/"

# GOOGLE API
GEOCODE_API_KEY = config("GEOCODE_API_KEY", default="")
GEOCODE_URL = "https://geocode.search.hereapi.com/v1/geocode"

# See: https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#std:setting-STATICFILES_DIRS
STATICFILES_DIRS = [os.path.join(PROJECT_PATH, "static")]

SITE_ID = 1

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(PROJECT_PATH, "media")
AWS_MEDIA_ROOT_URL = config("AWS_MEDIA_ROOT_URL", default="")

LISTING_DIR = MEDIA_URL + "listings"
AGENTS_DIR = MEDIA_URL + "agents"

AUTH_USER_MODEL = "users.User"

APPLE_CALLBACK_URL = config("APPLE_CALLBACK_URL", default="")
SOCIALACCOUNT_PROVIDERS = {
    "apple": {
        "APP": {
            # Your service identifier.
            "client_id": config("APPLE_CLIENT_ID", default=""),
            # The Key ID (visible in the "View Key Details" page).
            "secret": config("APPLE_SECRET", default=""),
            # Member ID/App ID Prefix -- you can find it below your name
            # at the top right corner of the page, or itâ€™s your App ID
            # Prefix in your App ID.
            "key": config("APPLE_KEY", default=""),
            # The certificate you downloaded when generating the key.
            # TODO: Find a better way to insert certiciate key properly
    }
}
}
